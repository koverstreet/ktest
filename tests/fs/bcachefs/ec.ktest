#!/usr/bin/env bash

. $(dirname $(readlink -e "${BASH_SOURCE[0]}"))/bcachefs-test-libs.sh

require-kernel-config BCACHEFS_ERASURE_CODING

config-scratch-devs 4G
config-scratch-devs 4G
config-scratch-devs 4G
config-scratch-devs 4G
config-scratch-devs 4G

test_ec_small()
{
    set_watchdog 60

    bcachefs_antagonist

    run_quiet "" bcachefs format -f		\
	--erasure_code				\
	--replicas=2				\
	"${ktest_scratch_dev[@]}"
    devs="$(join_by : "${ktest_scratch_dev[@]}")"

    mount -t bcachefs $devs /mnt

    #enable_memory_faults
    dd if=/dev/zero of=/mnt/foo bs=1M count=1 oflag=sync
    #disable_memory_faults

    mount -o remount,ro /mnt
    bcachefs fs usage /mnt
    df -h /mnt
    umount /mnt

    bcachefs fsck -n "${ktest_scratch_dev[@]}"

    # test remount:
    echo "Testing remount"
    mount -t bcachefs -o fsck $devs /mnt
    umount /mnt

    bcachefs fsck -ny "${ktest_scratch_dev[@]}"
    bcachefs_test_end_checks ${ktest_scratch_dev[0]}
}

test_ec_umount()
{
    set_watchdog 180

    run_quiet "" bcachefs format -f		\
	--erasure_code				\
	--replicas=2				\
	"${ktest_scratch_dev[@]}"
    devs="$(join_by : "${ktest_scratch_dev[@]}")"

    for i in $(seq 1 10); do
	mount -t bcachefs $devs /mnt
	dd if=/dev/zero of=/mnt/foo bs=8M count=128
	sync
	umount /mnt
    done

    bcachefs fsck -ny "${ktest_scratch_dev[@]}"
    bcachefs_test_end_checks ${ktest_scratch_dev[0]}
}

do_ec_test()
{
    set_watchdog 240

    bcachefs_antagonist

    run_quiet "" bcachefs format -f		\
	--erasure_code				\
	"$@"					\
	--replicas=2				\
	"${ktest_scratch_dev[@]}"
    devs="$(join_by : "${ktest_scratch_dev[@]}")"

    mount -t bcachefs $devs /mnt

    #enable_memory_faults

    run_fio_randrw

    #disable_memory_faults

    bcachefs fs usage -h /mnt
    umount /mnt
    bcachefs fsck -n "${ktest_scratch_dev[@]}"

    # test remount:
    echo "Testing remount"
    mount -t bcachefs -o fsck $devs /mnt
    cat /mnt/fiotest > /dev/null
    umount /mnt

    bcachefs fsck -ny "${ktest_scratch_dev[@]}"
    bcachefs_test_end_checks ${ktest_scratch_dev[0]}
}

test_ec()
{
    do_ec_test
}

test_ec_lz4()
{
    do_ec_test --compression=lz4
}

test_ec_crypto()
{
    do_ec_test --encrypted --no_passphrase
}

test_ec_crypto_lz4()
{
    do_ec_test --encrypted --no_passphrase --compression=lz4
}

test_ec_mixed_tiers()
{
    set_watchdog 240

    run_quiet "" bcachefs format -f		\
	--erasure_code				\
	--compression=lz4			\
	--replicas=2				\
	--label dup				\
	${ktest_scratch_dev[0]}			\
	${ktest_scratch_dev[1]}			\
	--label tri				\
	${ktest_scratch_dev[2]}			\
	${ktest_scratch_dev[3]}			\
	${ktest_scratch_dev[4]}			\
	--foreground_target=dup			\
	--promote_target=dup			\
	--background_target=tri

    devs="$(join_by : "${ktest_scratch_dev[@]}")"
    mount -t bcachefs $devs /mnt

    #enable_memory_faults
    run_fio_randrw
    #dd if=/dev/zero of=/mnt/foo bs=1M count=100 oflag=direct
    #disable_memory_faults

    bcachefs fs usage -h /mnt
    umount /mnt

    # test remount:
    echo "Testing remount"
    mount -t bcachefs -o fsck $devs /mnt
    umount /mnt

    bcachefs fsck -ny "${ktest_scratch_dev[@]}"
    bcachefs_test_end_checks ${ktest_scratch_dev[0]}
}

test_ec_gc()
{
    set_watchdog 2400

    local loops=$((($ktest_priority + 1) * 4))

    run_quiet "" bcachefs format -f		\
	--replicas=2				\
	"${ktest_scratch_dev[@]}"

    devs="$(join_by : "${ktest_scratch_dev[@]}")"
    mount -t bcachefs -o erasure_code $devs /mnt

    bcachefs_antagonist

    fill_device /mnt/fiotest

    # Writing with a small block size will increase the size of our metadata,
    # meaning we'll eventually see -ENOSPC even though ideally we shouldn't
    # since we're overwriting
    # When we do, truncate to free up some space and keep going:
    for i in $(seq 0 $loops); do
	run_fio_base				\
	    --name=randwrite			\
	    --stonewall				\
	    --rw=randwrite			\
	    --size=20G				\
	    --bsrange=4k-4k || true

	cur_size=$(stat -c '%s' /mnt/fiotest)
	new_size=$(($cur_size - 1048576))
	echo "truncating to $new_size"

	truncate --size=$new_size /mnt/fiotest
    done

    bcachefs fs usage -h /mnt
    umount /mnt

    bcachefs fsck -n "${ktest_scratch_dev[@]}"

    # test remount:
    mount -t bcachefs $devs /mnt
    umount /mnt

    bcachefs fsck -ny "${ktest_scratch_dev[@]}"
    bcachefs_test_end_checks ${ktest_scratch_dev[0]}
}

do_remove_test()
{
    offline=$1
    evacuate=$2

    set_watchdog 240

    run_quiet "" bcachefs format -f		\
	--erasure_code				\
	--replicas=2				\
	"${ktest_scratch_dev[@]}"

    mount -t bcachefs "$(join_by : "${ktest_scratch_dev[@]}")" /mnt

    local fioout="$ktest_out/fio-out"
    run_fio_randrw >"$fioout" 2>&1 &
    local fiopid=$!

    sleep 1

    if [[ $offline = 1 ]]; then
	echo -n "offlining ${ktest_scratch_dev[0]}... "
	bcachefs device offline --force	${ktest_scratch_dev[0]}
	echo "done"
    fi

    if [[ $evacuate = 1 ]]; then
	echo -n "evacuating ${ktest_scratch_dev[0]}... "
	bcachefs device evacuate	${ktest_scratch_dev[0]}
	echo "done"
    fi

    echo -n "removing ${ktest_scratch_dev[0]}... "
    if [[ $evacuate = 1 ]]; then
	bcachefs device remove		${ktest_scratch_dev[0]}
    else
	bcachefs device remove --force	${ktest_scratch_dev[0]}
    fi
    echo "done"

    if ! wait $fiopid; then
	cat "$fioout"
	return 1
    fi

    umount /mnt

    mount -t bcachefs "$(join_by : "${ktest_scratch_dev[@]}")" /mnt
    umount /mnt

    bcachefs fsck -ny "${ktest_scratch_dev[@]}"
    bcachefs_test_end_checks ${ktest_scratch_dev[0]}
}

test_device_remove_offline()
{
    do_remove_test 1 0
}

test_device_remove_online()
{
    do_remove_test 0 0
}

test_device_evacuate_offline()
{
    do_remove_test 1 1
}

test_device_evacuate_online()
{
    do_remove_test 0 1
}

test_device_failed()
{
    set_watchdog 240

    run_quiet "" bcachefs format -f		\
	--erasure_code				\
	--replicas=2				\
	"${ktest_scratch_dev[@]}"

    mount -t bcachefs "$(join_by : "${ktest_scratch_dev[@]}")" /mnt

    local fioout="$ktest_out/fio-out"
    run_fio_randrw >"$fioout" 2>&1 &
    local fiopid=$!

    sleep 1

    bcachefs device set-state -f failed ${ktest_scratch_dev[0]}

    if ! wait $fiopid; then
	cat "$fioout"
	return 1
    fi

    umount /mnt

    mount -t bcachefs "$(join_by : "${ktest_scratch_dev[@]}")" /mnt
    umount /mnt

    bcachefs fsck -ny "${ktest_scratch_dev[@]}"
    bcachefs_test_end_checks ${ktest_scratch_dev[0]}
}

main "$@"
